What happens when you initialize a repository? Why do you need to do it?

	The .git file is added to the working directory. You need this because that
	file is what Git uses to operate.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area is a type of pseudo-directory that allows you to prepare
	files that you want to commit. The value of this ability is that you don't
	have to commit every file in your working directory, nor do you have to commit
	each file separately; you can decide which files you want to commit, stage
	them, then commit that group of files!

How can you use the staging area to make sure you have one commit per logical
change?

	Only add the documents necessary for the change you're making instead of
	every single file in the directory.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When you have an experimental feature you want to try before adding to the
	main project.

	If the project comes to a point where there are different tiers of
	functionality (you could have a branch for each tier).

How do the diagrams help you visualize the branch structure?

	It really helps me see the relationship that each theoretical commit has
	to its parent as well as to the other branches and commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging combines the history of two separate branches.
	It's represented that way because the new branch is not being assimilated
	into the Master branch (nor vice versa); rather, the two branches are
	being combined into something unique.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Pros: Way less time consuming. Allows the user to focus their energy on
	conflicts that are actually legitimate.
	Cons: Can sometimes get it wrong. Can be annoying because the answer seems
	very obvious.